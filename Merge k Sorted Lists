/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if(lists == null || lists.size() == 0)
            return null;
        return mergeKLists(lists, 0, lists.size() - 1);        
    }
    
    private ListNode mergeKLists(List<ListNode> lists, int begin, int end){
        if(begin == end)
            return lists.get(begin);
        if(begin == end - 1)
            return mergeTwoLists(lists.get(begin), lists.get(end));
        
        int mid = begin + (end - begin) / 2;
        ListNode l1 = mergeKLists(lists, begin, mid);
        ListNode l2 = mergeKLists(lists, mid + 1, end);
        return mergeTwoLists(l1, l2);
    }
    
    private ListNode mergeTwoLists(ListNode l1, ListNode l2){
        ListNode head = new ListNode(-1);
        ListNode cur = head;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                cur.next = l1;
                l1 = l1.next;
            }else{
                cur.next = l2;
                l2 = l2.next;
            }
            cur = cur.next;
        }
        if(l1 == null)
            cur.next = l2;
        else
            cur.next = l1;
        return head.next;
    }
}

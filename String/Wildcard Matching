//DP with 2d space, easy to understand
public class Solution {
    public boolean isMatch(String s, String p) {
        //dp[i][j] means matching status between str.Substring(0, j) and pattern.Substring(0, i)
        boolean[][] dp = new boolean[p.length() + 1][s.length() + 1];
        dp[0][0] = true;
        int i = 0, j = 0;
        //dp[i][0] means to match empty string; '*' is matching empty string
        while(i < p.length() && p.charAt(i++) == '*')
            dp[i][0] = true;
        for(i = 1; i <= p.length(); i++){
            for(j = 1; j <= s.length(); j++){
                if (p.charAt(i-1) == '*')
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                else if(p.charAt(i - 1) == '?' || p.charAt(i - 1) == s.charAt(j - 1))
                    dp[i][j] = dp[i - 1][j - 1];
                else dp[i][j] = false;
            }
        }
        return dp[p.length()][s.length()];
    }
}

public class Solution {
    public boolean isMatch(String s, String p) {
        int lastStar = -1;
        int lastMatch = -1;
        int sIndex = 0;
        int pIndex = 0;
        while(sIndex < s.length()){
            if(pIndex < p.length() && (s.charAt(sIndex) == p.charAt(pIndex) || p.charAt(pIndex) == '?')){
                sIndex++; pIndex++;
            }else if(pIndex < p.length() && p.charAt(pIndex) == '*'){
                while(pIndex < p.length() && p.charAt(pIndex) == '*')
                    pIndex++;
                lastStar = pIndex - 1;
                lastMatch = sIndex - 1;
            }else{
                if(lastStar == - 1)
                    return false;
                //backtrace to the last star and match a char in s    
                pIndex = lastStar + 1;
                lastMatch++;
                sIndex = lastMatch + 1;
            }
        }
        while(pIndex < p.length() && p.charAt(pIndex) == '*')
            pIndex++;
        return pIndex == p.length();
    }
}

//DP with 1d space
public class Solution {
    public boolean isMatch(String s, String p) {
        //dp[i][j] means matching status between str.Substring(0, j) and pattern.Substring(0, i)
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i = 1; i <= p.length(); i++){
            if (p.charAt(i-1) == '*'){
                for(int j = 1; j <= s.length(); j++){
                    dp[j] = dp[j] || dp[j - 1];
                }
            }else{
                for(int j = s.length(); j > 0; j--){
                    if(p.charAt(i - 1) == '?' || p.charAt(i - 1) == s.charAt(j - 1))
                        dp[j] = dp[j - 1];
                    else dp[j] = false;
                }
                dp[0] = false;
            }
        }
        return dp[s.length()];
    }
}

//Similiar to Regular Expression Matching, only for understanding, TLE
public class Solution {
    public boolean isMatch(String s, String p) {
        if(s.length() == 0)
            return isEmpty(p);
        if(p.length() == 0)
            return false;
            
        if(p.charAt(0) == '*'){
            return isMatch(s, p.substring(1)) || isMatch(s.substring(1), p);
        }else{
            if(compare(s.charAt(0),p.charAt(0)))
                return isMatch(s.substring(1), p.substring(1));
            return false;
        }
    }
    
    private boolean compare(char c, char p){
        return p == '?' || c == p;
    }
    
    private boolean isEmpty(String p){
        for(int i = 0; i < p.length(); i++){
            if(p.charAt(i) != '*')
                return false;
        }
        return true;
    }
}

public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
        int len = A.length + B.length;
        if(len % 2 != 0)
            return findKthSortedArrays(A, B, 0, 0, (len + 1) / 2);
        else{
            double d1 = findKthSortedArrays(A, B, 0, 0, len / 2);
            double d2 = findKthSortedArrays(A, B, 0, 0, len / 2 + 1);
            return (d1 + d2) / 2;
        }
    }
    
    private double findKthSortedArrays(int A[], int B[], int sa, int sb, int k){
        if(A.length - sa > B.length - sb)
            return findKthSortedArrays(B, A, sb, sa, k);
        if(sa == A.length)
            return B[sb + k - 1];
        if(k == 1)
            return Math.min(A[sa], B[sb]);
            
        int ia = Math.min(A.length - 1, sa + k / 2 - 1);
        int ib = sb + k - (ia - sa + 1) - 1;
        if(A[ia] < B[ib])
            return findKthSortedArrays(A, B, ia + 1, sb, k - (ia - sa + 1));
        else if(A[ia] > B[ib])
            return findKthSortedArrays(A, B, sa, ib + 1, k - (ib - sb + 1));
        else 
            return A[ia];
    }
}

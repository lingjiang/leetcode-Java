//DP
public class Solution {
    public int longestValidParentheses(String s) {
        int max = 0;
        int[] match = new int[s.length()];
        for(int i = 1; i < s.length(); i++){
            int m = i - match[i - 1] - 1;
            if(s.charAt(i) == ')' && m >= 0 && s.charAt(m) == '('){
                match[i] = match[i-1] + 2;
                //()((...))
                if(m - 1 >= 0)
                    match[i] += match[m-1];
            }
            max = Math.max(max, match[i]);
        }
        return max;
    }
}

//Stack
public class Solution {
    public int longestValidParentheses(String s) {
        int max = 0;
        int last = -1;
        Stack<Integer> stack = new Stack<Integer>();
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == '('){
                stack.push(i);   
            }else{
                if(stack.isEmpty()){
                    last = i;
                }else{
                    stack.pop();
                    if(stack.isEmpty()){
                        max = Math.max(max, i - last);
                    }else{
                        max = Math.max(max, i - stack.peek());
                    }
                }
            }
        }
        return max;
    }
}


//Similiar to Stack, but O(1) space, 2 pass
public class Solution {
    public int longestValidParentheses(String s) {
        int max = 0, start = -1, depth = 0;
        //遗漏了左括号比右括号多的情况
	for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                depth++;
            }else{
                depth--;
                if(depth < 0){
                    start = i;
                    depth = 0;
                }else if(depth == 0){
                    max = Math.max(max, i - start);
                }
            }
        }
        
	//考虑左括号比右括号多
        start = s.length();
        depth = 0;
        for(int i = s.length() - 1; i >= 0; i--){
            if(s.charAt(i) == ')'){
                depth++;
            }else{
                depth--;
                if(depth < 0){
                    start = i;
                    depth = 0;
                }else if(depth == 0){
                    max = Math.max(max, start - i);
                }
            }
        }
        return max;
    }
}


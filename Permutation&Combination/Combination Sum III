public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        DFS(k, n, 1, rst, path);
        return rst;
    }
    
    private void DFS(int k, int n, int index, List<List<Integer>> rst, List<Integer> path){
        if(n == 0 && k == 0){
            rst.add(new ArrayList<Integer>(path));
            return;
        }
        if(k == 0 || n == 0)
            return;
        
        for(int i = index; 10 - i >= k; i++){
            if(i > n)
                break;
            
            path.add(i);
            DFS(k - 1, n - i, i + 1, rst, path);
            path.remove(path.size() - 1);
        }
    }
}

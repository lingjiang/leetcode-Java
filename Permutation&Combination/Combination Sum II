public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        DFS(candidates, target, 0, rst, list);
        return rst;
    }
    
    private void DFS(int[] candidates, int target, int index, List<List<Integer>> rst, List<Integer> list){
        if(target == 0){
            rst.add(new ArrayList<Integer>(list));
            return;
        }
        
        Integer prev = null;
        for(int i = index; i < candidates.length; i++){
            int can = candidates[i];
            if(can > target)
                break;
            if(prev == null || prev != can){
                list.add(can);
                DFS(candidates, target - can, i + 1, rst, list);
                list.remove(list.size() - 1);
                prev = can;
            }
        }
    }
}

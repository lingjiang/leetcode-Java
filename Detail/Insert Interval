/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> rst = new ArrayList<Interval>();
        Interval prev = null;
        for(Interval it : intervals){
            if(it.start > newInterval.start){
                Interval tmp = it;
                it = newInterval;
                newInterval = tmp;
            }
            if(prev != null && prev.end >= it.start){
                prev.end = Math.max(prev.end, it.end);
            }else{
                rst.add(it);
                prev = it;
            }
        }
        if(prev != null && prev.end >= newInterval.start){
            prev.end = Math.max(prev.end, newInterval.end);
        }else{
            rst.add(newInterval);
        }
        return rst;
    }
}

public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        if (newInterval == null || intervals == null) {
            return intervals;
        }
        ArrayList<Interval> results = new ArrayList<Interval>();
        int insertPos = 0;
        for (Interval interval : intervals) {
            if (interval.end < newInterval.start) {
                results.add(interval);
                insertPos++;
            } else if (interval.start > newInterval.end) {
                results.add(interval);
            } else {
                newInterval.start = Math.min(interval.start, newInterval.start);
                newInterval.end = Math.max(interval.end, newInterval.end);
            }
        }
        results.add(insertPos, newInterval);
        return results;
    }
}

public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        int i = 0;
        while(i < intervals.size()){
            Interval t = intervals.get(i);
            if(newInterval.end < t.start){
                break;
            }else if(newInterval.start > t.end){
                i++;
            }else{
                newInterval.start = Math.min(newInterval.start, t.start);
                newInterval.end = Math.max(newInterval.end, t.end);
                intervals.remove(i);
            }
        }
        intervals.add(i, newInterval);
        return intervals;
    }
}

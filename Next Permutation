public class Solution {
    public void nextPermutation(int[] num) {
        assert num.length > 0;
        
        int i = num.length - 1;
        while(i > 0 && num[i-1] >= num[i]){
            i--;
        }
        if(i > 0){
            int t = upperBound(num, i, num[i-1]);
            swap(num, i - 1, t);
        }
        reverse(num, i, num.length - 1);
    }
    
    public int upperBound(int[] num, int first, int target){
        int last = num.length - 1;
        while(first < last){
            int mid = last - (last - first) / 2;
            if(num[mid] <= target)
                last = mid - 1;
            else
                first = mid;
        }
        return last;
    }
    
    public void reverse(int[] num, int start, int end){
        while(start < end){
            swap(num, start, end);
            start++;
            end--;
        }
    }
    
    public void swap(int[] num, int i, int j){
        int tmp = num[i];
        num[i] = num[j];
        num[j] = tmp;
    }
}
